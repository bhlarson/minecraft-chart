
"apiVersion": "v1"
"kind": "Namespace"
"metadata":
  "name": {{.Values.namespace}}

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: minecraft-store
spec:
  storageClassName: minecraft-store
  capacity:
    storage: {{ .Values.objectstore.size | quote }}
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: {{.Values.objectstore.hostPath.path}}

--- 

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # This name uniquely identifies the PVC. Will be used in deployment below.
  name: minecraft-pv-claim
  namespace: {{.Values.namespace}}
  labels:
    app: minecraft-pv-claim
spec:
  # Read more about access modes here: http://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes
  accessModes:
    - ReadWriteOnce
  storageClassName: Filesystem
  resources:
    # This is the request for storage. Should be available in the cluster.
    requests:
      storage: {{ .Values.objectstore.size | quote }}
  storageClassName: minecraft-store

---

apiVersion: v1
kind: Service
metadata:
  name: {{.Values.service.name}}
  namespace: {{.Values.namespace}}
spec:
  type: LoadBalancer
  ports:
    - name: api
      port: 25565
      targetPort: 25565
      nodePort: {{ .Values.service.nodePort}}
      protocol: TCP
  selector:
    app: minecraft

---

apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: {{.Values.deployment.name}}
  namespace: {{.Values.namespace}}
spec:
  selector:
    matchLabels:
      app: minecraft
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        # Label is used as selector in the service.
        app: minecraft
    spec:
      # Refer to the PVC created earlier
      volumes:
      - name: storage
        persistentVolumeClaim:
          # Name of the PVC created earlier
          claimName: minecraft-pv-claim
      containers:
      - name: minecraft
        # Pulls the default Minio image from Docker Hub
        image: itzg/minecraft-server:latest
        env:
        # Minio access key and secret key
        - name: EULA
          value: "TRUE"
        ports:
        - containerPort: 25565
          hostPort: 25565
        # Mount the volume into the pod
        volumeMounts:
        - name: storage # must match the volume name, above
          mountPath: "/data"